using System;
using System.Collections;
using System;
using System.Collections;
using System.Linq;
using CodeBase.Data;
using CodeBase.Data.Upgrades;
using CodeBase.Services.PersistentProgress;
using CodeBase.Services.StaticData;
using CodeBase.StaticData.Items;
using CodeBase.StaticData.Items.Shop.WeaponsUpgrades;
using CodeBase.StaticData.Weapons;
using UnityEngine;

namespace CodeBase.Hero
{
    [RequireComponent(typeof(Rigidbody))]
    public class HeroRotating : MonoBehaviour
    {
        [SerializeField] private float _sensitivity = 1.0f;
        [SerializeField] private float _xAxisClamp = 0;

        private bool _canRotate = true;
        private const float RotationSpeed = 0.02f;
        private const float SmoothRotationSpeed = 0.04f;
        private const float AngleForFastRotating = 10f;
        private const float MaxAngleForLookAt = 1f;
        private const float BaseRatio = 1f;
        private IStaticDataService _staticDataService;
        private float _rotationRatio = BaseRatio;
        private float _baseRotationSpeed;
        private float _rotationSpeed;
        private PlayerProgress _progress;
        private UpgradeItemData _rotationItemData;
        private HeroWeaponTypeId _weaponTypeId;

        private void Start() =>
            Cursor.lockState = CursorLockMode.Locked;

        private void Update()
        {
            if (_canRotate)
                Rotate();
        }

        private void Rotate()
        private void OnEnable()
        {
            if (_progress != null)
                _progress.WeaponsData.CurrentWeaponChanged += WeaponChanged;

            if (_rotationItemData != null)
                _rotationItemData.LevelChanged += SetRotationSpeed;
        }

        private void OnDisable()
        {
            if (_progress != null)
                _progress.WeaponsData.CurrentWeaponChanged -= WeaponChanged;

            if (_rotationItemData != null)
                _rotationItemData.LevelChanged -= SetRotationSpeed;
        }

        public void Construct(IPlayerProgressService progressService, IStaticDataService staticDataService)
        {
            _progress = progressService.Progress;
            _staticDataService = staticDataService;
            _progress.WeaponsData.CurrentWeaponChanged += WeaponChanged;
            WeaponChanged();
        }

        private void WeaponChanged()
        {
            if (_rotationItemData != null)
                _rotationItemData.LevelChanged -= SetRotationSpeed;

            _weaponTypeId = _progress.WeaponsData.CurrentHeroWeaponTypeId;
            _baseRotationSpeed = _staticDataService.ForHeroWeapon(_weaponTypeId).RotationSpeed;
            _rotationItemData = _progress.WeaponsData.UpgradesData.UpgradeItemDatas.First(x =>
                x.WeaponTypeId == _weaponTypeId && x.UpgradeTypeId == UpgradeTypeId.Rotation);
            _rotationItemData.LevelChanged += SetRotationSpeed;
            SetRotationSpeed();
        }

        private void SetRotationSpeed()
        {
            _rotationItemData = _progress.WeaponsData.UpgradesData.UpgradeItemDatas.First(x =>
                x.WeaponTypeId == _weaponTypeId && x.UpgradeTypeId == UpgradeTypeId.Rotation);

            if (_rotationItemData.LevelTypeId == LevelTypeId.None)
                _rotationRatio = BaseRatio;
            else
                _rotationRatio = _staticDataService
                    .ForUpgradeLevelsInfo(_rotationItemData.UpgradeTypeId, _rotationItemData.LevelTypeId).Value;

            _rotationSpeed = _baseRotationSpeed * _rotationRatio;
        }

        public void TurnOff()
        {
        }
        {
            float mouseX = Input.GetAxis("Mouse X");
            float mouseY = Input.GetAxis("Mouse Y");

            float rotationAmountX = mouseX * _sensitivity;
            float rotationAmountY = mouseY * _sensitivity;

            _xAxisClamp -= rotationAmountY;

            Vector3 rotation = transform.rotation.eulerAngles;

            rotation.x -= rotationAmountY;
            rotation.y += rotationAmountX;

            switch (_xAxisClamp)
            {
                case > 90:
                    _xAxisClamp = 90;
                    rotation.x = 90;
                    break;
                case < -90:
                    _xAxisClamp = -90;
                    rotation.x = -90;
                    break;
            }

            transform.rotation = Quaternion.Euler(rotation);
        }

        public void TurnOn() =>
            _canRotate = true;

        public void TurnOff() =>
            _canRotate = false;
    }
}