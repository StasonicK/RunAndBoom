//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/CodeBase/InputActions/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""dcc5bfb4-181c-488c-ba08-379b504aedb4"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5717085c-6f30-4e3f-9545-03c33fd773b8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""c23f18b0-e297-406d-bc1c-5706ccb03e54"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChooseWeapon 1"",
                    ""type"": ""Button"",
                    ""id"": ""7b05dfd3-7055-4f5a-b66c-4ef944051494"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChooseWeapon 2"",
                    ""type"": ""Button"",
                    ""id"": ""d9273457-4361-4fca-941b-6e95aa57e36a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChooseWeapon 3"",
                    ""type"": ""Button"",
                    ""id"": ""04e3f148-4aa2-418d-bdae-e56a84abc306"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChooseWeapon 4"",
                    ""type"": ""Button"",
                    ""id"": ""2473459d-1929-4c97-9f5e-ef525137a5e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""b095afe9-da2d-4ab1-b1fd-02831f93c70f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""048c932c-6c81-4282-90db-01ffb2c96b99"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""60199fbb-ad96-4379-8961-f2330269b5d2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8f95f7a3-e50e-4405-9742-fefa19b33e71"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""eb420192-3e2e-4a53-a354-a2a178625505"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e624aa4c-8ff4-49a1-8a6a-3d0c878d64cf"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c37eb2c-f59d-41ee-bc2b-7eb9afbfbabc"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03fae841-5031-4075-b1b6-5e0044dd623e"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""ChooseWeapon 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6e30304-a583-4259-89d8-b0203912a820"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""ChooseWeapon 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""129c9ff3-b7dd-4e4e-bae5-899fc5651f53"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""ChooseWeapon 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc4caeac-87ed-4b86-ab90-3f5787567476"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""ChooseWeapon 4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Touchscreen"",
            ""bindingGroup"": ""Touchscreen"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard and mouse"",
            ""bindingGroup"": ""Keyboard and mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Shoot = m_Player.FindAction("Shoot", throwIfNotFound: true);
        m_Player_ChooseWeapon1 = m_Player.FindAction("ChooseWeapon 1", throwIfNotFound: true);
        m_Player_ChooseWeapon2 = m_Player.FindAction("ChooseWeapon 2", throwIfNotFound: true);
        m_Player_ChooseWeapon3 = m_Player.FindAction("ChooseWeapon 3", throwIfNotFound: true);
        m_Player_ChooseWeapon4 = m_Player.FindAction("ChooseWeapon 4", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Shoot;
    private readonly InputAction m_Player_ChooseWeapon1;
    private readonly InputAction m_Player_ChooseWeapon2;
    private readonly InputAction m_Player_ChooseWeapon3;
    private readonly InputAction m_Player_ChooseWeapon4;
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Shoot => m_Wrapper.m_Player_Shoot;
        public InputAction @ChooseWeapon1 => m_Wrapper.m_Player_ChooseWeapon1;
        public InputAction @ChooseWeapon2 => m_Wrapper.m_Player_ChooseWeapon2;
        public InputAction @ChooseWeapon3 => m_Wrapper.m_Player_ChooseWeapon3;
        public InputAction @ChooseWeapon4 => m_Wrapper.m_Player_ChooseWeapon4;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Shoot.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShoot;
                @ChooseWeapon1.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChooseWeapon1;
                @ChooseWeapon1.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChooseWeapon1;
                @ChooseWeapon1.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChooseWeapon1;
                @ChooseWeapon2.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChooseWeapon2;
                @ChooseWeapon2.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChooseWeapon2;
                @ChooseWeapon2.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChooseWeapon2;
                @ChooseWeapon3.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChooseWeapon3;
                @ChooseWeapon3.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChooseWeapon3;
                @ChooseWeapon3.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChooseWeapon3;
                @ChooseWeapon4.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChooseWeapon4;
                @ChooseWeapon4.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChooseWeapon4;
                @ChooseWeapon4.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChooseWeapon4;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @ChooseWeapon1.started += instance.OnChooseWeapon1;
                @ChooseWeapon1.performed += instance.OnChooseWeapon1;
                @ChooseWeapon1.canceled += instance.OnChooseWeapon1;
                @ChooseWeapon2.started += instance.OnChooseWeapon2;
                @ChooseWeapon2.performed += instance.OnChooseWeapon2;
                @ChooseWeapon2.canceled += instance.OnChooseWeapon2;
                @ChooseWeapon3.started += instance.OnChooseWeapon3;
                @ChooseWeapon3.performed += instance.OnChooseWeapon3;
                @ChooseWeapon3.canceled += instance.OnChooseWeapon3;
                @ChooseWeapon4.started += instance.OnChooseWeapon4;
                @ChooseWeapon4.performed += instance.OnChooseWeapon4;
                @ChooseWeapon4.canceled += instance.OnChooseWeapon4;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_TouchscreenSchemeIndex = -1;
    public InputControlScheme TouchscreenScheme
    {
        get
        {
            if (m_TouchscreenSchemeIndex == -1) m_TouchscreenSchemeIndex = asset.FindControlSchemeIndex("Touchscreen");
            return asset.controlSchemes[m_TouchscreenSchemeIndex];
        }
    }
    private int m_KeyboardandmouseSchemeIndex = -1;
    public InputControlScheme KeyboardandmouseScheme
    {
        get
        {
            if (m_KeyboardandmouseSchemeIndex == -1) m_KeyboardandmouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and mouse");
            return asset.controlSchemes[m_KeyboardandmouseSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnChooseWeapon1(InputAction.CallbackContext context);
        void OnChooseWeapon2(InputAction.CallbackContext context);
        void OnChooseWeapon3(InputAction.CallbackContext context);
        void OnChooseWeapon4(InputAction.CallbackContext context);
    }
}
