//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/CodeBase/InputActions/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""dcc5bfb4-181c-488c-ba08-379b504aedb4"",
            ""actions"": [
                {
                    ""name"": ""SwipeContact"",
                    ""type"": ""PassThrough"",
                    ""id"": ""dea51f87-38d9-40b1-b71d-279a99ad9ba2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwipePosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""58e52caa-32be-40df-88f9-a5de5942aa33"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DoubleTapContact"",
                    ""type"": ""Button"",
                    ""id"": ""a102c396-8195-4c3e-8178-2fc02df05cec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""MultiTap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DoubleTapPosition"",
                    ""type"": ""Value"",
                    ""id"": ""5d04123b-d576-4e41-85b5-200c2cc1488f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5717085c-6f30-4e3f-9545-03c33fd773b8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Break out"",
                    ""type"": ""Button"",
                    ""id"": ""6ef44956-0714-44f6-b027-fe296d23ec18"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9d54a7bd-34fd-4084-b80f-d2c78df4d5ae"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""SwipeContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f05f204-43ef-4c3d-9bb2-e59f88688274"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""SwipePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""beedda02-b8fa-4781-a956-15b4735b3f8e"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""SwipePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e72413f-c3fe-4276-bfd5-8cb5e45f5cbc"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""SwipeContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5002b663-e62a-42d8-9e2a-4a9fb4af263a"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""DoubleTapPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2dcdfa2c-395c-47a6-a9dd-f471cf404645"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""DoubleTapPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c57fd35-8ee0-45f5-bf84-372376696d51"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""DoubleTapContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3ebbb9c-df85-4e18-87cc-8811d9eca632"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""DoubleTapContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""b095afe9-da2d-4ab1-b1fd-02831f93c70f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""048c932c-6c81-4282-90db-01ffb2c96b99"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""60199fbb-ad96-4379-8961-f2330269b5d2"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8f95f7a3-e50e-4405-9742-fefa19b33e71"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""eb420192-3e2e-4a53-a354-a2a178625505"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ecd24b00-1505-4c87-b061-ac849ce0af68"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Break out"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Touchscreen"",
            ""bindingGroup"": ""Touchscreen"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard and mouse"",
            ""bindingGroup"": ""Keyboard and mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_SwipeContact = m_Player.FindAction("SwipeContact", throwIfNotFound: true);
        m_Player_SwipePosition = m_Player.FindAction("SwipePosition", throwIfNotFound: true);
        m_Player_DoubleTapContact = m_Player.FindAction("DoubleTapContact", throwIfNotFound: true);
        m_Player_DoubleTapPosition = m_Player.FindAction("DoubleTapPosition", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Breakout = m_Player.FindAction("Break out", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_SwipeContact;
    private readonly InputAction m_Player_SwipePosition;
    private readonly InputAction m_Player_DoubleTapContact;
    private readonly InputAction m_Player_DoubleTapPosition;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Breakout;
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwipeContact => m_Wrapper.m_Player_SwipeContact;
        public InputAction @SwipePosition => m_Wrapper.m_Player_SwipePosition;
        public InputAction @DoubleTapContact => m_Wrapper.m_Player_DoubleTapContact;
        public InputAction @DoubleTapPosition => m_Wrapper.m_Player_DoubleTapPosition;
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Breakout => m_Wrapper.m_Player_Breakout;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @SwipeContact.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwipeContact;
                @SwipeContact.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwipeContact;
                @SwipeContact.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwipeContact;
                @SwipePosition.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwipePosition;
                @SwipePosition.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwipePosition;
                @SwipePosition.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwipePosition;
                @DoubleTapContact.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDoubleTapContact;
                @DoubleTapContact.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDoubleTapContact;
                @DoubleTapContact.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDoubleTapContact;
                @DoubleTapPosition.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDoubleTapPosition;
                @DoubleTapPosition.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDoubleTapPosition;
                @DoubleTapPosition.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDoubleTapPosition;
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Breakout.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBreakout;
                @Breakout.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBreakout;
                @Breakout.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBreakout;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SwipeContact.started += instance.OnSwipeContact;
                @SwipeContact.performed += instance.OnSwipeContact;
                @SwipeContact.canceled += instance.OnSwipeContact;
                @SwipePosition.started += instance.OnSwipePosition;
                @SwipePosition.performed += instance.OnSwipePosition;
                @SwipePosition.canceled += instance.OnSwipePosition;
                @DoubleTapContact.started += instance.OnDoubleTapContact;
                @DoubleTapContact.performed += instance.OnDoubleTapContact;
                @DoubleTapContact.canceled += instance.OnDoubleTapContact;
                @DoubleTapPosition.started += instance.OnDoubleTapPosition;
                @DoubleTapPosition.performed += instance.OnDoubleTapPosition;
                @DoubleTapPosition.canceled += instance.OnDoubleTapPosition;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Breakout.started += instance.OnBreakout;
                @Breakout.performed += instance.OnBreakout;
                @Breakout.canceled += instance.OnBreakout;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_TouchscreenSchemeIndex = -1;
    public InputControlScheme TouchscreenScheme
    {
        get
        {
            if (m_TouchscreenSchemeIndex == -1) m_TouchscreenSchemeIndex = asset.FindControlSchemeIndex("Touchscreen");
            return asset.controlSchemes[m_TouchscreenSchemeIndex];
        }
    }
    private int m_KeyboardandmouseSchemeIndex = -1;
    public InputControlScheme KeyboardandmouseScheme
    {
        get
        {
            if (m_KeyboardandmouseSchemeIndex == -1) m_KeyboardandmouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and mouse");
            return asset.controlSchemes[m_KeyboardandmouseSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnSwipeContact(InputAction.CallbackContext context);
        void OnSwipePosition(InputAction.CallbackContext context);
        void OnDoubleTapContact(InputAction.CallbackContext context);
        void OnDoubleTapPosition(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnBreakout(InputAction.CallbackContext context);
    }
}
